diff --git a/components/Interpreter.jsx b/components/Interpreter.jsx
index 7e4bc92..3ac9047 100644
--- a/components/Interpreter.jsx
+++ b/components/Interpreter.jsx
@@ -1,8 +1,60 @@
 import './Interpreter.css';
 import * as React from 'react';
+import MonacoEditor from "react-monaco-editor";
+import usePython from "react-py/dist/hooks/usePython.js";
+import { useEffect, useState } from "react";
+
+function Editor() {
+    const [code, changeCode] = useState("");
+    const [editor, setEditor] = useState(null);
+    const { runPython, stdout, stderr, isLoading, isRunning } = usePython();
+
+    useEffect(() => {
+        window.addEventListener("resize", () => {
+            if (editor) {
+                editor.layout({});
+                editor.layout();
+            }
+        });
+    }, [editor]);
+
+    return (
+        <div className="editor">
+            <MonacoEditor
+                editorWillMount={(editor) => setEditor(editor)}
+                language="python"
+                theme="vs-dark"
+                className="editor-monaco"
+                height="70vh"
+                value={code}
+                onChange={changeCode}
+            />
+            <input
+                type="submit"
+                className="editor-button"
+                value={isLoading ? "Loading..." : isRunning ? "Running..." : "Run!"}
+                disabled={isLoading || isRunning}
+                onClick={(e) => {
+                    e.preventDefault();
+                    runPython(code);
+                }}
+            />
+            <div className="editor-output">
+                <div className="editor-stdout">
+                    <p>Output</p>
+                    <pre><code>{stdout}</code></pre>
+                </div>
+                <div className="editor-stderr">
+                    <p>Error</p>
+                    <pre><code>{stderr}</code></pre>
+                </div>
+            </div>
+        </div>
+    );
+}
 
 export default function() {
     return <main>
-        abcd
+        <Editor />
     </main>;
 }
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index b31a87d..4542b14 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1568,6 +1568,12 @@
         "safe-buffer": "^5.0.1"
       }
     },
+    "base64-js": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
+      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
+      "dev": true
+    },
     "boolbase": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz",
@@ -1584,6 +1590,16 @@
         "update-browserslist-db": "^1.0.5"
       }
     },
+    "buffer": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
+      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
+      "dev": true,
+      "requires": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
+      }
+    },
     "buffer-from": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
@@ -1672,6 +1688,11 @@
       "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
       "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
     },
+    "comlink": {
+      "version": "4.3.1",
+      "resolved": "https://registry.npmjs.org/comlink/-/comlink-4.3.1.tgz",
+      "integrity": "sha512-+YbhUdNrpBZggBAHWcgQMLPLH1KDF3wJpeqrCKieWQ8RL7atmgsgTQko1XEBK6PsecfopWNntopJ+ByYG1lRaA=="
+    },
     "comma-separated-tokens": {
       "version": "1.0.8",
       "resolved": "https://registry.npmjs.org/comma-separated-tokens/-/comma-separated-tokens-1.0.8.tgz",
@@ -2026,6 +2047,12 @@
         "entities": "^3.0.1"
       }
     },
+    "ieee754": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
+      "dev": true
+    },
     "import-fresh": {
       "version": "3.3.0",
       "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
@@ -2303,6 +2330,11 @@
       "integrity": "sha512-/sKlQJCBYVY9Ers9hqzKou4H6V5UWc/M59TH2dvkt+84itfnq7uFOMLpOiOS4ujvHP4etln18fmIxA5R5fll0g==",
       "dev": true
     },
+    "monaco-editor": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/monaco-editor/-/monaco-editor-0.34.1.tgz",
+      "integrity": "sha512-FKc80TyiMaruhJKKPz5SpJPIjL+dflGvz4CpuThaPMc94AyN7SeC9HQ8hrvaxX7EyHdJcUY5i4D0gNyJj1vSZQ=="
+    },
     "ms": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
@@ -2532,6 +2564,22 @@
       "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
       "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ=="
     },
+    "react-monaco-editor": {
+      "version": "0.51.0",
+      "resolved": "https://registry.npmjs.org/react-monaco-editor/-/react-monaco-editor-0.51.0.tgz",
+      "integrity": "sha512-6jx1V8p6gHVKJHFaTvicOtmlhFjOJhekobeNd92ZAo7F5UvAin1cF7bxWLCKgtxClYZ7CB3Ar284Kpbhj22FpQ==",
+      "requires": {
+        "prop-types": "^15.8.1"
+      }
+    },
+    "react-py": {
+      "version": "1.3.4",
+      "resolved": "https://registry.npmjs.org/react-py/-/react-py-1.3.4.tgz",
+      "integrity": "sha512-uIOVFcxtJtv5gKHX1FKmmNsTzii3DyLVXF7U4AMfbd2GVh9MYOg4Bj1G7TusjPNCcEKMs467rolQU7CRs3+zEA==",
+      "requires": {
+        "comlink": "^4.3.1"
+      }
+    },
     "react-refresh": {
       "version": "0.9.0",
       "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.9.0.tgz",
diff --git a/text.txt b/text.txt
new file mode 100644
index 0000000..3c070e4
--- /dev/null
+++ b/text.txt
@@ -0,0 +1,30 @@
+When trying to use the module with Parcel, the compilation fails:
+
+```
+@parcel/transformer-js: Web workers cannot have imports or exports without the `type: "module"` option.
+
+  proj/node_modules/react-py/dist/hooks/usePython.js:80:41
+    79 |     var createWorker = function () {
+  > 80 |         var worker = new Worker(new URL('../workers/python-worker', import.meta.url));
+  >    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ The environment was originally created here
+    81 |         workerRef.current = worker;
+    82 |     };
+
+  üí° Add {type: 'module'} as a second argument to the Worker constructor.
+  üìù Learn more: https://parceljs.org/languages/javascript/#classic-scripts
+```
+
+This is triggered by this import in `worker.js`:
+
+```
+import { expose } from 'comlink';
+``
+
+Replacing this line with these 2 makes the error go away:
+
+```
+importScripts('https://cdn.jsdelivr.net/npm/comlink@4.3.1/dist/umd/comlink.min.js');
+const expose = Comlink.expose;
+```
+
+According to [this StackOverflow answer](https://stackoverflow.com/a/45578811), the `{type: 'module'}` will soon be accepted by all modern browsers as the second parameter to `new Worker()`. A (better?) alternative is to configure the builder to inline the `comlink` dependency.
